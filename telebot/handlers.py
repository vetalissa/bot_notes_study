from contextlib import suppress

from aiogram import F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold

from loader import dp


#  '<blockquote>–¶–∏—Ç–∞—Ç–∞</blockquote>'
# '<b>(–∂–∏—Ä–Ω—ã–π)</b>'
#  '<i>–∫—É—Ä—Å–∏–≤</i>'
#  '<u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>'
#  '''<pre><code class='language-python'>
#     —Å—é–¥–∞ –ø–∏—à–µ–º –∫–æ–¥
#  </code></pre>'''


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!')


@dp.message(Command('menu'))
async def menu_for_instruction(message: Message):
    """
    –ú–µ–Ω—é-–Ω–∞–≤–∏–≥–∞—Ü–∏—è
    """
    await message.answer('<b>–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:</b> \n\n'
                         '<u>Start:</u>\n'
                         '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç /start_project1\n'
                         '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç /start_project2\n'
                         '\n'
                         '<u>–ö–Ω–æ–ø–∫–∏:</u>\n'
                         '–ö–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–µ—Ä—ã –ø—Ä—è–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ /inline_callback\n'
                         '–ß—Ç–æ –±—ã –¥–µ–ª–∞—Ç—å –≤–æ—Ç —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã /call_command\n'
                         '–ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤—ã /buttons_for_choice\n'
                         '–ö–∞–∫ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≥–∏—Ñ–∫—É —á–µ—Ä–µ–∑ url /gif_or_image\n'
                         '–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å–ª–æ–≤—É /filter_text\n'
                         '\n\n\n'
                         '<u>–ü—Ä–æ–µ–∫—Ç–∏–∫–∏ –º–∏–Ω–∏:</u>\n'

                         )


@dp.message(Command('start_project1'))
async def cmd_start_project(message: Message):
    await message.answer(
        ''' –Ω–∞—á–∞–ª–æ...
        ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É telegram_bot_project (–∏–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º)
        ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º cmd –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º venv –≤ —ç—Ç—É –ø–∞–ø–∫—É
        ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º venv –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º:
                üì• pip install aiogram
                üì• pip install python-dotenv
        ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É telebot(–∏–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º)
        ‚úÖ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:
        \n
            üìÅ telebot/
            |--üìÅ bot/
            |  |--üìÑ __init__.py
            |  |--üìÑ bot.py
            |  |
            |  |--üìÅ handlers/
            |  |  |--üìÑ __init__.py
            |  |  |--üìÑ text_handlers.py
            |  |  |--üìÑ photo_handlers.py
            |  |
            |  |--üìÅ tests/
            |     |--üìÑ __init__.py
            |     |--üìÑ test_handlers.py
            |     |--üìÑ test_business_logic.py
            |
            |--üìÅ config/
            |  |--üìÑ __init__.py
            |  |--üìÑ config.py
            |
            |--üìÅ media/
            |  |--üìÅ images/
            |  |--üìÅ documents/
            |
            |--üìÅ database/
            |  |--üìÑ __init__.py
            |  |--üìÑ models.py
            |
            |--üìÑ main.py
            |--üìÑ .env
    ''')


@dp.message(Command('start_project2'))
async def cmd_start_project2(message: Message):
    await message.answer("""
        ‚úÖ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω;
        ‚úÖ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ üìÑ .env:
            TOKEN=—Ç–æ–∫–µ–Ω –≤–∞—à
        ‚úÖ –¥–æ—Å—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –≤ üìÑ config:
            <pre> <code class='language-python'>
            import os
            from dotenv import load_dotenv
            load_dotenv()
            TOKEN = str(os.getenv('TOKEN'))
            </code></pre>
        ‚úÖ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ üìÑ loader:
           <pre> <code class='language-python'>
            from aiogram import Bot, Dispatcher
            from aiogram.enums import ParseMode
            from aiogram.client.bot import DefaultBotProperties
            from config import TOKEN\n
            bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            dp = Dispatcher()
            </code></pre>\
        ‚úÖ  –ø–∏—à–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ üìÑ main:
            <pre> <code class='language-python'>
            import asyncio
            import logging
            import sys
            from handlers import —Ñ—É–Ω–∫—Ü–∏—è_–¥–µ–π—Å—Ç–≤–∏—è
            from loader import bot, dp\n
            async def main() -> None:
                dp.message.register(—Å—é–¥–∞ –ø–∏—à–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è_–¥–µ–π—Å—Ç–≤–∏—è –∏–∑ handlers)
                await dp.start_polling(bot)
            \n
            if __name__ == '__main__':
                logging.basicConfig(level=logging.INFO, stream=sys.stdout)
                asyncio.run(main())
            </code></pre>
        """)


@dp.message(Command('call_command'))
async def cmd_inline_callable(message: Message):
    await message.answer(
        '–§—É–Ω–∫—Ü–∏—è  –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'
        '''<pre> <code class='language-python'>
        @dp.message(Command('–∏–º—è_–∫–æ–º–∞–Ω–¥—ã_–¥–ª—è_–≤—ã–∑–æ–≤–∞'))
        async def –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏_–∫–Ω–æ–ø–∫–∏(message: types.Message):
            await message.answer(—Å—é–¥–∞ –ø–∏—à–µ–º –≤—ã–≤–æ–¥ —á—Ç–æ –¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
        </code></pre>''')


@dp.message(Command('inline_callback'))
async def inline_callable(message: Message):
    await message.answer(
        '–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'

        '''<pre> <code class='language-python'>
        @dp.message(Command('–∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞'))
        async def –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏_–∫–Ω–æ–ø–∫–∏(message: types.Message):
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
            text='–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ',
            callback_data='–∏–º—è_–æ—Ç–≤–µ—Ç–∞', ))\n
            with suppress(TelegramBadRequest):
                await message.answer(
                '—Ç–µ–∫—Å—Ç –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π',
                reply_markup=builder.as_markup())
        </code></pre>\n\n'''

        '–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'

        '''<pre> <code class='language-python'>
        @dp.callback_query(F.data == '–∏–º—è –æ—Ç–≤–µ—Ç–∞')
        async def –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏_–æ—Ç–≤–µ—Ç–∞(callback: types.CallbackQuery):
            await callback.message.answer(–≤–æ—Ç —Å—é–¥–∞ –ø–∏—à–µ–º, —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É)
            await callback.answer()
        </code></pre>'''
        '–ü—Ä–∏–º–µ—Ä: /test_inline_callback'
    )


@dp.message(Command('test_inline_callback'))
async def cmd_test(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text='–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ',
        callback_data='test_answer', ))
    with suppress(TelegramBadRequest):
        await message.answer(
            '—Ç–µ–∫—Å—Ç –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π',
            reply_markup=builder.as_markup())


@dp.callback_query(F.data == 'test_answer')
async def cmd_test_answer(callback: types.CallbackQuery):
    await callback.message.answer('–¢—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫–æ–π-—Ç–æ –æ—Ç–≤–µ—Ç')
    await callback.answer()


button1 = KeyboardButton(text='Knopka 1')
button2 = KeyboardButton(text='Knopka 2')
keyboard = ReplyKeyboardMarkup(keyboard=[[button1, button2]],
                               resize_keyboard=True,
                               one_time_keyboard=True
                               )


@dp.message(Command('buttons_choice'))
async def cmd_buttons_choice(message: Message):
    await message.answer(text='–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ?',
                         reply_markup=keyboard)


@dp.message(Command('buttons_choice2'))
async def cms_buttons_choice2(message: Message):
    kb = [[KeyboardButton(text='answer'),
           KeyboardButton(text='pupa')]]

    keyboard2 = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(text='this two variant for you, what you choice?',
                         reply_markup=keyboard2)


@dp.message(F.text == 'answer')
async def process_answer_pipa(message: Message):
    await message.answer(
        text='–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É :\n\n'
             '''<pre> <code class='language-python'>
             @dp.message(F.text == '—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
             async def –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏(message: Message):
                 await message.answer(
                     text='–æ—Ç–≤–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                     reply_markup=types.ReplyKeyboardRemove())
             </code></pre>\n\n''',
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(F.text == 'pupa')
async def process_answer_pupa(message: Message):
    await message.answer(
        text='–î–∞',
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(Command('buttons_for_choice'))
async def buttons_for_choice(message: Message):
    await message.answer(
        '–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'

        '''<pre> <code class='language-python'>
    @dp.message(Command('–∫–æ–º–∞–Ω–¥–∞_–≤—ã–∑–æ–≤–∞_–∫–Ω–æ–ø–æ–∫'))
    async def –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏(message: Message):
        kb = [[KeyboardButton(text='—Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ 1'),\nKeyboardButton(text='—Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ 2')]]
        keyboard2 = ReplyKeyboardMarkup(
          keyboard=kb,
          resize_keyboard=True,
          one_time_keyboard=True
        )
        await message.answer(text='—Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–π–¥–µ—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π',
                            reply_markup=keyboard2)
        </code></pre>\n\n'''
        '–ø—Ä–∏–º–µ—Ä: /buttons_choice  /buttons_choice2'
    )


@dp.message(Command('gif_or_image'))
async def buttonss_for_choice(message: Message):
    await message.answer(
        '–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'

        '''<pre> <code class='language-python'>
        @dp.message()
        async def –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏(message: types.Message) -> None:
        try:
            if PARAMETER_SENDER == '–ì–∏—Ñ–∫—É':
                API_GIF_URL = '—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç'
                gif_response = requests.get(API_GIF_URL)
                if gif_response.status_code == 200:
                    gif_link = gif_response.json()['image'] #—Ç—É—Ç –º—ã –¥–æ—Å—Ç–∞–µ–º –∏–∑ json —Ç–∞–∫ –∫–∞–∫ –≤—ã–º –Ω—É–∂–Ω–æ
                    await message.bot(SendVideo(chat_id=message.chat.id, video=gif_link))
            elif PARAMETER_SENDER == '–ö–∞—Ä—Ç–∏–Ω–∫—É':
                API_IMAGE_URL = '—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç'
                image_response = requests.get(API_IMAGE_URL)
                if image_response.status_code == 200:
                    cat_link = image_response.json()[0]['url'] #—Ç—É—Ç –º—ã –¥–æ—Å—Ç–∞–µ–º –∏–∑ json —Ç–∞–∫ –∫–∞–∫ –≤—ã–º –Ω—É–∂–Ω–æ
                    await message.bot(SendPhoto(chat_id=message.chat.id, photo=cat_link))

        except TypeError:
            await message.answer('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏!')
        </code></pre>\n\n'''
    )


@dp.message(Command('filter_text'))
async def filter_text(message: Message):
    await message.answer(
        '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–∏—à–µ–º —Ç–∞–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —á—Ç–æ –±—ã –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è'
        '–æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –Ω–∞ –∫–∞–∫–∏–µ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ;'
        '–∏ —Å–æ–±–ª—é–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n\n'
        '–ü–µ—Ä–≤—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É –Ω–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ 1\n'
        '–í—Ç–æ—Ä–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ—Å—Ç—É–ø–∏–ª —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ\n\n'
        '''<pre> <code class='language-python'>
        @dp.message(lambda x: x.text and x.text.isdigit() and 1 = int(x.text))
        @dp.message(F.text.lower().in_(['–∞ –≤–æ—Ç —Å—é–¥–∞ –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è']))
        </code></pre>''')
